# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#

	root /var/www/html;
	index progress;
	server_name _;

  # pass these URLs to app
	location ~ ^/(oauthback|progress|grid|control|detail|status|config|job|summary|healthcheck|replayhost|metrics|jobtimeoutcheck|logout|showlog|release_versions|config_files|restart|start|stop|repo_branches|deb_download_url) {
    proxy_buffering off;
    proxy_pass http://127.0.0.1:4000;
		proxy_set_header Host            $host;
		proxy_set_header X-Forwarded-For $remote_addr;
	}

	# Only allow AWS East Coast Private IPS
	location ~ ^/errorlog/(.+)$ {
			allow 172.0.0.0/9;
			deny all;

			# Apply rate limiting to this location
      limit_req zone=limitheavycalls burst=1 nodelay;

      content_by_lua_block {
					local file_name = ngx.var.uri:match("/errorlog/(.+)")
					local file_path = "/var/log/jobfiles/" .. file_name .. ".log"

					-- Helper function to escape HTML
					local function html_escape(str)
							local map = {
								['&'] = "&amp;",
								['<'] = "&lt;",
								['>'] = "&gt;",
								['"'] = "&quot;",
								["'"] = "&#39;"
							}
							return (str:gsub("[&<>\"]", map))
					end

          if ngx.req.get_method() == "POST" then
              -- Handle POST request to write data to file
							ngx.req.read_body()
              local data = ngx.req.get_body_data()

              if data then
							    local escaped_data = html_escape(data)
                  local file, err = io.open(file_path, "w")
                  if not file then
                      ngx.log(ngx.ERR, "Could not open file for writing: ", err)
                      ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                      ngx.say("Error saving log data.")
                      return
                  end

                  file:write(escaped_data)
                  file:close()

                  ngx.status = ngx.HTTP_OK
                  ngx.say("Log saved successfully.")
              else
                  ngx.status = ngx.HTTP_BAD_REQUEST
                  ngx.say("No data received.")
              end

          elseif ngx.req.get_method() == "GET" then
              -- Handle GET request to read data from file
              local file, err = io.open(file_path, "r")
              if not file then
                  ngx.log(ngx.ERR, "Could not open file for reading: ", err)
                  ngx.status = ngx.HTTP_NOT_FOUND
                  ngx.say("Log file not found.")
                  return
              end

              local content = file:read("*a")
              file:close()

              ngx.status = ngx.HTTP_OK
              ngx.say(content)

          elseif ngx.req.get_method() == "DELETE" then
              -- Handle DELETE request to remove the file
              local ok, err = os.remove(file_path)
              if not ok then
                  ngx.log(ngx.ERR, "Could not delete file: ", err)
                  ngx.status = ngx.HTTP_NOT_FOUND
                  ngx.say("Log file not found or unable to delete.")
                  return
              end

              ngx.status = ngx.HTTP_OK
              ngx.say("Log file deleted successfully.")

          else
              -- Method not allowed
              ngx.status = ngx.HTTP_NOT_ALLOWED
              ngx.say("Method not allowed.")
          end
      }
  }

	location = / {
		return 301 /progress;
	}

  # everything else serve static content
  location / {
    try_files $uri $uri/ =404;
  }

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}
